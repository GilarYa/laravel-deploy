name: Deploy to CPanel
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'incremental'
        type: choice
        options:
        - incremental
        - full
        - force_all_php
      force_upload:
        description: 'Force upload all PHP files (if auto-detection fails)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
jobs:
  FTP-Deploy-Action:
    name: FTP-Deploy-Action
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better diff detection
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build assets
      run: |
        npm install
        npm run build

    - name: Install PHP and Composer
      uses: shivammathur/setup-php@v2
      with:
          php-version: '8.2' # Adjust to match the PHP version used by your Laravel project
          tools: 'composer'

    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader
        
    - name: Prepare deployment files
      run: |
        # Remove files that shouldn't be deployed
        rm -rf .git/
        rm -rf node_modules/
        rm -rf tests/
        rm -f .env.example
        rm -f phpunit.xml
        rm -f README.md
        rm -f .gitignore
        rm -f .editorconfig
        rm -f vite.config.js
        rm -f package*.json
        rm -f composer.lock

        # Clear Laravel caches
        rm -rf storage/logs/*
        rm -rf storage/framework/cache/data/*
        rm -rf storage/framework/sessions/*
        rm -rf storage/framework/views/*
        rm -rf bootstrap/cache/*.php

        # Create necessary directories with proper permissions
        mkdir -p storage/logs
        mkdir -p storage/framework/cache/data
        mkdir -p storage/framework/sessions
        mkdir -p storage/framework/views
        mkdir -p bootstrap/cache

    - name: Determine deployment mode
      id: deploy_mode
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          DEPLOY_TYPE="${{ github.event.inputs.deployment_type }}"
        else
          DEPLOY_TYPE="incremental"
        fi

        echo "deployment_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT
        echo "üöÄ Deployment mode: $DEPLOY_TYPE"

    - name: Detect Changed Files
      id: changes
      if: steps.deploy_mode.outputs.deployment_type == 'incremental'
      run: |
        echo "üîç Detecting changed files from Git..."

        # Debug: Show recent commits
        echo "Recent commits:"
        git log --oneline -3
        echo ""

        # Get all changed files (more comprehensive)
        echo "All changed files in last commit:"
        git diff --name-only HEAD~1 HEAD
        echo ""

        # Get changed files (modified/added) - include more file types
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(php|blade\.php|js|css|json|html|txt|xml|yml|yaml)$' | grep -v -E '^(tests/|\.github/|node_modules/|package.*\.json|composer\.lock)$' || true)

        # Get deleted files
        DELETED_FILES=$(git diff --name-status HEAD~1 HEAD | grep '^D' | cut -f2 | grep -E '\.(php|blade\.php|js|css|json|html|txt|xml|yml|yaml)$' | grep -v -E '^(tests/|\.github/|node_modules/|package.*\.json|composer\.lock)$' || true)

        echo "üìù Files to upload/update:"
        if [ -n "$CHANGED_FILES" ]; then
          echo "$CHANGED_FILES"
        else
          echo "  (none)"
        fi
        echo ""
        echo "üóëÔ∏è Files to delete:"
        if [ -n "$DELETED_FILES" ]; then
          echo "$DELETED_FILES"
        else
          echo "  (none)"
        fi

        # Save to outputs
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "deleted_files<<EOF" >> $GITHUB_OUTPUT
        echo "$DELETED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Force upload option
        if [ "${{ github.event.inputs.force_upload }}" = "true" ]; then
          echo "üîß FORCE MODE: Uploading all PHP files regardless of Git changes"
          CHANGED_FILES=$(find . -name "*.php" -o -name "*.blade.php" | grep -v -E '^(./tests/|./node_modules/|./.git/)' | sed 's|^\./||' || true)
          echo "Force upload files:"
          echo "$CHANGED_FILES"
        fi

        # Check if there are any changes
        if [ -z "$CHANGED_FILES" ] && [ -z "$DELETED_FILES" ]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚ùå No deployable changes detected"
          echo ""
          echo "üîß If you expect changes but none detected, try:"
          echo "   1. Manual deployment with 'full' mode"
          echo "   2. Enable 'force_upload' option"
          echo "   3. Check if file extensions are supported"
          echo "   4. Verify files are committed to Git"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes detected - will deploy"
        fi

    - name: Selective FTP Deploy
      id: selective_deploy
      if: steps.deploy_mode.outputs.deployment_type == 'incremental' && steps.changes.outputs.has_changes == 'true'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_wait_seconds: 15
        command: |
          # Install lftp
          sudo apt-get update && sudo apt-get install -y lftp

          echo "üéØ Selective deployment - only processing changed files..."

          # Create FTP script
          cat > ftp_script.txt << 'EOF'
          set ftp:ssl-allow no
          set ftp:passive-mode on
          set net:timeout 60
          set net:max-retries 3
          EOF

          echo "open ftp://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.SERVER }}" >> ftp_script.txt
          echo "cd /public_html/" >> ftp_script.txt
          echo "lcd ./" >> ftp_script.txt

          # Upload changed files
          CHANGED_COUNT=0
          if [ -n "${{ steps.changes.outputs.changed_files }}" ]; then
            echo "üì§ Uploading changed/new files..."
            echo "${{ steps.changes.outputs.changed_files }}" | while read -r file; do
              if [ -n "$file" ] && [ -f "$file" ]; then
                # Create directory if needed
                dir=$(dirname "$file")
                if [ "$dir" != "." ] && [ "$dir" != "" ]; then
                  echo "mkdir -p \"$dir\"" >> ftp_script.txt
                fi
                echo "put \"$file\" \"$file\"" >> ftp_script.txt
                echo "  ‚úÖ Queued: $file"
                CHANGED_COUNT=$((CHANGED_COUNT + 1))
              fi
            done
            echo "Total files queued for upload: $CHANGED_COUNT"
          else
            echo "No files to upload"
          fi

          # Delete removed files
          if [ -n "${{ steps.changes.outputs.deleted_files }}" ]; then
            echo "üóëÔ∏è Deleting removed files..."
            echo "${{ steps.changes.outputs.deleted_files }}" | while read -r file; do
              if [ -n "$file" ]; then
                echo "rm \"$file\"" >> ftp_script.txt
                echo "  üóëÔ∏è Queued for deletion: $file"
              fi
            done
          fi

          echo "quit" >> ftp_script.txt

          # Show FTP script for debugging
          echo "üìã FTP Script to execute:"
          cat ftp_script.txt
          echo ""

          # Execute FTP commands with verbose output
          echo "üöÄ Executing deployment..."
          if lftp -f ftp_script.txt; then
            echo "‚úÖ FTP commands executed successfully!"
          else
            echo "‚ùå FTP execution failed!"
            exit 1
          fi

          echo "‚úÖ Selective deployment completed!"

    - name: No Changes Detected
      if: steps.deploy_mode.outputs.deployment_type == 'incremental' && steps.changes.outputs.has_changes == 'false'
      run: |
        echo "‚ÑπÔ∏è No deployable files changed since last commit."
        echo "üìÅ Only documentation or configuration files were modified."

    - name: Full FTP Deploy
      if: steps.deploy_mode.outputs.deployment_type == 'full'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 2
        retry_wait_seconds: 60
        command: |
          # Install lftp
          sudo apt-get update && sudo apt-get install -y lftp

          # Full deployment with lftp
          lftp -e "
          set ftp:ssl-allow no;
          set ftp:passive-mode on;
          set net:timeout 120;
          set net:max-retries 3;
          open ftp://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.SERVER }};
          cd /public_html/;
          lcd ./;
          mirror --reverse --delete --verbose --parallel=1 ./ ./;
          quit
          "

    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ steps.deploy_mode.outputs.deployment_type }}" = "full" ]; then
          echo "‚úÖ Full deployment completed!"
          echo "üîÑ Future pushes will only deploy changed files."
        elif [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
          echo "‚úÖ Selective deployment completed!"
          echo "ÔøΩ Uploaded: $(echo '${{ steps.changes.outputs.changed_files }}' | wc -l) files"
          echo "üóëÔ∏è Deleted: $(echo '${{ steps.changes.outputs.deleted_files }}' | wc -l) files"
          echo "‚ö° Only changed files were processed - no unnecessary transfers!"
        else
          echo "‚ÑπÔ∏è No deployment needed - no relevant files changed."
        fi
        echo "üéØ Server synchronized with Git repository."